import {println} from "../src/index";
import {Tensor} from '../src/index.js';
import TensorMath from "../src/TensorMath";

test('softmaxcrossentropy', function() {
  let labels = Tensor.ones([10, 10]);
  let logits = Tensor.rand([10, 10]).add(Tensor.scalar(100));
  let t = {
    0: 1,
    1: 0,
    2: 0,
    3: 0,
    4: 0,
    5: 0,
    6: 0,
    7: 0,
    8: 0,
    9: 0,
    10: 1,
    11: 0,
    12: 0,
    13: 0,
    14: 0,
    15: 0,
    16: 0,
    17: 0,
    18: 0,
    19: 0,
    20: 1,
    21: 0,
    22: 0,
    23: 0,
    24: 0,
    25: 0,
    26: 0,
    27: 0,
    28: 0,
    29: 0,
    30: 1,
    31: 0,
    32: 0,
    33: 0,
    34: 0,
    35: 0,
    36: 0,
    37: 0,
    38: 0,
    39: 0,
    40: 1,
    41: 0,
    42: 0,
    43: 0,
    44: 0,
    45: 0,
    46: 0,
    47: 0,
    48: 0,
    49: 0,
    50: 1,
    51: 0,
    52: 0,
    53: 0,
    54: 0,
    55: 0,
    56: 0,
    57: 0,
    58: 0,
    59: 0,
    60: 1,
    61: 0,
    62: 0,
    63: 0,
    64: 0,
    65: 0,
    66: 0,
    67: 0,
    68: 0,
    69: 0,
    70: 1,
    71: 0,
    72: 0,
    73: 0,
    74: 0,
    75: 0,
    76: 0,
    77: 0,
    78: 0,
    79: 0,
    80: 1,
    81: 0,
    82: 0,
    83: 0,
    84: 0,
    85: 0,
    86: 0,
    87: 0,
    88: 0,
    89: 0,
    90: 1,
    91: 0,
    92: 0,
    93: 0,
    94: 0,
    95: 0,
    96: 0,
    97: 0,
    98: 0,
    99: 0
  };
  let s = {
    0: 108.94117736816406,
    1: 108.94117736816406,
    2: 108.94117736816406,
    3: 108.94117736816406,
    4: 108.94117736816406,
    5: 108.94117736816406,
    6: 108.94117736816406,
    7: 108.94117736816406,
    8: 108.94117736816406,
    9: 108.94117736816406,
    10: 122.94117736816406,
    11: 122.94117736816406,
    12: 122.94117736816406,
    13: 122.94117736816406,
    14: 122.94117736816406,
    15: 122.94117736816406,
    16: 122.94117736816406,
    17: 122.94117736816406,
    18: 122.94117736816406,
    19: 122.94117736816406,
    20: 77.24706268310547,
    21: 77.24706268310547,
    22: 77.24706268310547,
    23: 77.24706268310547,
    24: 77.24706268310547,
    25: 77.24706268310547,
    26: 77.24706268310547,
    27: 77.24706268310547,
    28: 77.24706268310547,
    29: 77.24706268310547,
    30: 68.19607543945312,
    31: 68.19607543945312,
    32: 68.19607543945312,
    33: 68.19607543945312,
    34: 68.19607543945312,
    35: 68.19607543945312,
    36: 68.19607543945312,
    37: 68.19607543945312,
    38: 68.19607543945312,
    39: 68.19607543945312,
    40: 92.03529357910156,
    41: 92.03529357910156,
    42: 92.03529357910156,
    43: 92.03529357910156,
    44: 92.03529357910156,
    45: 92.03529357910156,
    46: 92.03529357910156,
    47: 92.03529357910156,
    48: 92.03529357910156,
    49: 92.03529357910156,
    50: 117.08235168457031,
    51: 117.08235168457031,
    52: 117.08235168457031,
    53: 117.08235168457031,
    54: 117.08235168457031,
    55: 117.08235168457031,
    56: 117.08235168457031,
    57: 117.08235168457031,
    58: 117.08235168457031,
    59: 117.08235168457031,
    60: 70.19999694824219,
    61: 70.19999694824219,
    62: 70.19999694824219,
    63: 70.19999694824219,
    64: 70.19999694824219,
    65: 70.19999694824219,
    66: 70.19999694824219,
    67: 70.19999694824219,
    68: 70.19999694824219,
    69: 70.19999694824219,
    70: 141.6549072265625,
    71: 141.6549072265625,
    72: 141.6549072265625,
    73: 141.6549072265625,
    74: 141.6549072265625,
    75: 141.6549072265625,
    76: 141.6549072265625,
    77: 141.6549072265625,
    78: 141.6549072265625,
    79: 141.6549072265625,
    80: 43.64313888549805,
    81: 43.64313888549805,
    82: 43.64313888549805,
    83: 43.64313888549805,
    84: 43.64313888549805,
    85: 43.64313888549805,
    86: 43.64313888549805,
    87: 43.64313888549805,
    88: 43.64313888549805,
    89: 43.64313888549805,
    90: 86.89804077148438,
    91: 86.89804077148438,
    92: 86.89804077148438,
    93: 86.89804077148438,
    94: 86.89804077148438,
    95: 86.89804077148438,
    96: 86.89804077148438,
    97: 86.89804077148438,
    98: 86.89804077148438,
    99: 86.89804077148438
  };

  for (let i = 0; i < 100; i++) {
    labels.data[i] = t[i];
    logits.data[i] = s[i];
  }

  let result = TensorMath.softmaxCrossEntropyWithLogits(labels, logits);
  println(result);
});

test('tile', function() {
  let base = Tensor.create([[1]]);
  let repeats = [10, 10];

  let result = TensorMath.tile(base, repeats);
  println(result);
});